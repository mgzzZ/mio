///
/// Created by zgm on 2021/11/8
/// Describe:
///
import 'dart:async';
import 'dart:io';

import 'package:archive/archive.dart';
import 'package:build/build.dart';
import 'package:crypto/crypto.dart' show md5;
import 'package:mio/widget_to_dsl/mio_compiler_helper.dart';
import 'package:path/path.dart' as path;

class ArchiveBuilder extends PostProcessBuilder with FlatCompiler {
  @override
  FutureOr<void> build(PostProcessBuildStep buildStep) async {
    final dir = path.join('build', 'fair');
    Directory(dir).createSync(recursive: true);
    final bundleName = path.join(
        dir,
        buildStep.inputId.path
            .replaceAll(inputExtensions.first, '.mio.json')
            .replaceAll('/', '_')
            .replaceAll('\\', '_'));
    //final jsName = bundleName.replaceFirst('.json', '.js');

    // await dart2JS(buildStep.inputId.path, jsName);
    await compileBundle(buildStep, bundleName);

    // 压缩下发产物
    var zipSrcPath = path.join(Directory.current.path, 'build', 'mio');
    var zipDesPath = path.join(Directory.current.path, 'build', 'mio', 'mio_patch.zip');
    _zip(Directory(zipSrcPath), File(zipDesPath));
  }

  @override
  Iterable<String> get inputExtensions => ['.bundle.json'];

  Future<void> compileBundle(PostProcessBuildStep buildStep, String bundleName) async {
    final bytes = await buildStep.readInputAsBytes();
    final file = File(bundleName)..writeAsBytesSync(bytes);
    if (file.lengthSync() > 0) {
      buildStep.deletePrimaryInput();
    }
    var bin = await compile(file.absolute.path);
    if (bin.success) {
      print('[mio] FlatBuffer format generated for ${file.path}');
    } else {
      print('error: [mio] FlatBuffer format fail ${bin.message}');
    }
    final buffer = StringBuffer();
    buffer.writeln('# Generated by Fair on ${DateTime.now()}.\n');
    final source = buildStep.inputId.path.replaceAll(inputExtensions.first, '.dart');
    buffer.writeln('source: ${buildStep.inputId.package}|$source');
    final digest = md5.convert(bytes).toString();
    buffer.writeln('md5: $digest');
    buffer.writeln('json: ${buildStep.inputId.package}|${file.path}');
    if (bin.success) {
      buffer.writeln('bin: ${buildStep.inputId.package}|${bin.data}');
    }
    buffer.writeln('date: ${DateTime.now()}');
    File('${bundleName.replaceAll('.json', '.metadata')}').writeAsStringSync(buffer.toString());

    print('[mio] New bundle generated => ${file.path}');
  }

  void _zip(Directory data, File zipFile) {
    final archive = Archive();
    for (var entity in data.listSync(recursive: false)) {
      if (entity is! File) {
        continue;
      }
      if (entity.path.endsWith('.json')) {
        final file = entity as File;
        var filename = file.path.split('/').last;
        final List<int> bytes = file.readAsBytesSync();
        archive.addFile(ArchiveFile(filename, bytes.length, bytes));
      }
    }
    zipFile.writeAsBytesSync(ZipEncoder().encode(archive), flush: false);
  }
}
